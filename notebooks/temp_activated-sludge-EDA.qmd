---
title: "Global Activated Sludge Exploratory Data Analysis"
editor: visual
author: "Joe Boktor"
date: '2023-04-18'
format: 
  html:
    font-family: helvetica neue
    page-layout: full
    toc: true
    toc-location: left
    toc-depth: 5
    self-contained: true
    code-fold: true
    code-tools: true
    fig-align: center
    grid:
      sidebar-width: 200px
      body-width: 1100px
      margin-width: 200px
      gutter-width: 1.5em
---

Environment setup.

```{r}
#| warning: false
library(tidyverse)
library(magrittr)
library(reticulate)
library(glue)
library(bio3d)
library(protr)
library(seqinr)
library(future)
library(batchtools)
library(future.batchtools)
library(furrr)
library(fs)
library(tictoc)
library(listenv)
library(progress)
library(strex)
library(data.table)
library(kableExtra)
library(Biostrings)
# Plotting functions
library(ggpackets)
library(ggpointdensity)
library(ggside)
library(patchwork)
library(ggridges)
library(scales)
library(plotly)
library(ggsci)
library(viridis)
library(ggforce)
library(seriation)
library(ggtree)
library(mctoolsr)
library(aplot)
library(vegan)
library(ggplot2)
library(phyloseq)
library(microbiome)
library(MGnifyR)
library(DirichletMultinomial)
library(reshape2)

tmpdir <- "/central/scratch/jbok/tmp"
homedir <- "/central/groups/MazmanianLab/joeB"
wkdir <- glue(
"{homedir}/Microbiota-Immunomodulation/Microbiota-Immunomodulation"
)
src_dir <- glue("{wkdir}/notebooks")
source(glue("{src_dir}/R_scripts/helpers_general.R"))

mgnify_cache <- glue("{homedir}/Downloads/MGnify_cache")
# 1.5gb  limit (1500*1024^2 = 1572864000)
options(future.globals.maxSize= 1572864000)
mg <- mgnify_client(usecache = TRUE, cache_dir = mgnify_cache)
```



### Finding studies with activated sludge in the biome name.
On 2023-10-02 "activated sludge" was searched in the MGnify database. The results were downloaded as a csv files.

```{r}
biome1 <- read_csv(
    glue("{wkdir}/2023-10-02_MGnify_root-Engineered-Wastewater-Activated Sludge.csv")
    )
biome2 <- read_csv(
    glue("{wkdir}/2023-10-02_MGnify_root-Engineered-Bioremediation-Terephthalate-Wastewater-Activated sludge.csv")
    )

sample_acc_df <- bind_rows(biome1, biome2)
sample_acc_df %>%
  DT::datatable(options = list(scrollX = TRUE))

```

```{r}
analyses_accessions <- mgnify_analyses_from_studies(mg, sample_acc_df$accession)
analyses_accessions

# Downloading metadata and placing in a data-frame
analyses_metadata_df <- mgnify_get_analyses_metadata(mg, analyses_accessions)
analyses_metadata_df %>% glimpse

# Converting data into phyloseq
analyses_ps <- mgnify_get_analyses_phyloseq(mg, analyses_metadata_df$analysis_accession, tax_SU = "SSU")

saveRDS(
  analyses_ps, 
  glue("{wkdir}/2023-10-02_MGnify-Activated-Sludge_phyloseq.rds")
)

```

Visualizing data

```{r}
analyses_ps <- readRDS(
  glue("{wkdir}/2023-10-02_MGnify-Activated-Sludge_phyloseq.rds")
)
```

```{r}

# Aitchison distance PCA

# microbiome::abundances(analyses_ps) %>% as.data.frame() %>% colSums() > 5

# Pick core taxa with with the given prevalence and detection limits
ps_pca <- analyses_ps %>% 
  subset_samples(analysis_experiment.type == "assembly") %>% 
  core(detection = 1, prevalence = 1/95) %>%
  microbiome::transform("clr")

# ps_pca %>% 
#   microbiome::abundances() %>% 
#   as.data.frame() %>% 
#   colSums()


idist <- phyloseq::distance(ps_pca, method = "euclidean")
dist_label <- "Aitchison"
imds <- phyloseq::ordinate(ps_pca, "MDS", distance = idist)

p <- plot_ordination(ps_pca, imds, color = "analysis_experiment.type", axes = c(1, 2))
p


pca_df <- p$data

# p <- 
ggplot(pca_df, aes(Axis.1, Axis.2)) + 
  geom_point(shape = 21, size = 3, alpha = 0.7) +
  theme_bw() +
  labs(fill = "Donor Group") +
  xlab(paste0("PCoA 1 (", round((imds$values$Relative_eig[1]) * 100, digits = 2), "%)")) +
  ylab(paste0("PCoA 2 (", round((imds$values$Relative_eig[2]) * 100, digits = 2), "%)")) +
  # labs(fill = "Donor Group") +
  # scale_fill_manual(values = cols.pdpchc.dark) +
  # scale_color_manual(values = cols.pdpchc.rim) +
  theme(
    plot.title = element_text(hjust = 0.5),
    panel.grid = element_blank()
  )

```

### Dirichlet Multinomial Mixtures

```{r}
library(DirichletMultinomial)
library(reshape2)

# get a list of samples with fewer than 1000 counts total 
sample_sums <- microbiome::abundances(analyses_ps) %>% as.data.frame() %>% colSums()
low_read_samples <- names(sample_sums[sample_sums < 1000])

pseq <- analyses_ps %>% 
  subset_samples(analysis_experiment.type == "amplicon") %>% 
  subset_samples(analysis_accession %nin% low_read_samples) %>% 
  microbiome::transform("compositional") %>%
  core(detection = 1e-3, prevalence = 0.1)
pseq

# get a list of samples with fewer than 1000 counts total 
sample_sums_rnd2 <- microbiome::abundances(pseq) %>% as.data.frame() %>% colSums()
low_read_samples_rnd2 <- names(sample_sums_rnd2[sample_sums_rnd2 == 0])

pseq %<>% subset_samples(analysis_accession %nin% low_read_samples_rnd2)


# taxa and samples to retain


# Pick the OTU count matrix
# and convert it into samples x taxa format
dat <- analyses_ps %>% 
  subset_samples(analysis_accession %in% sample_names(pseq)) %>%
  prune_taxa(taxa(pseq), .) %>%
  abundances()
count <- as.matrix(t(dat))
min(rowSums(count))

```

Fitting model
```{r}

nclus <- 3
fit <-  lapply(1:3, dmn, count = count, verbose=TRUE)
# future::plan("multisession", workers =  nclus)

# fit <- furrr::future_map(1:nclus, ~ dmn(.x, count = count, verbose = TRUE))


```


```{r}

fit[[1]] %>% 

```

```{r}
lplc <- sapply(fit, laplace)

```


```{r}
# # Use relative abundance data
# ps <- microbiome::transform(analyses_ps, "compositional")
# # Pick core taxa
# ps <- core(ps, detection = 0, prevalence = 1e-5)

# Illustrate sample similarities with PCoA (NMDS)
plot_landscape(analyses_ps, "PCA", transformation = "clr")
# ?plot_landscape
```